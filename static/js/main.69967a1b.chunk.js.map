{"version":3,"sources":["components/QuoteBox/QuoteBox.module.css","components/TweetButton/TweetButton.module.css","components/Quote/Quote.module.css","components/Author/Author.js","components/TweetButton/TweetButton.js","components/Quote/Quote.js","components/QuoteBox/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","container","btn","quote","author","props","react_default","a","createElement","id","tweetButton","Fragment","href","rel","target","className","styles","QuoteBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","results","json","data","quoteObj","quotes","Math","ceil","random","setState","_this3","Quote","Author","onClick","componentDidMount","TweetButton","Component","App","components_QuoteBox_QuoteBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,UAAA,4BAAAC,IAAA,6CCAlBH,EAAAC,QAAA,CAAkBE,IAAA,2CCAlBH,EAAAC,QAAA,CAAkBG,MAAA,6NCOHC,EANA,SAAAC,GACX,OACIC,EAAAC,EAAAC,cAAA,MAAIC,GAAG,UAAUJ,EAAMD,yBCOhBM,EARK,SAAAL,GAChB,OACAC,EAAAC,EAAAC,cAACF,EAAAC,EAAMI,SAAP,KACIL,EAAAC,EAAAC,cAAA,KAAGI,KAAK,mCAAmCC,IAAI,sBAAsBC,OAAO,SAASL,GAAG,eAAcH,EAAAC,EAAAC,cAAA,UAAQO,UAAWC,IAAOd,KAA1B,mCCG/FC,EAND,SAAAE,GACV,OACIC,EAAAC,EAAAC,cAAA,MAAIO,UAAWC,IAAOb,MAAOM,GAAG,QAAQJ,EAAMF,wBCqCvCc,cAnCX,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhB,KACDoB,MAAQ,CACTtB,MAAO,GACPC,OAAQ,IAJGc,mFAQC,IAAAQ,EAAAL,KAChBM,MAAM,0IACLC,KAAK,SAAAC,GACF,OAAOA,EAAQC,SAChBF,KAAK,SAAAG,GACJ,IAAIC,EAAWD,EAAKE,OAAOC,KAAKC,KAAqB,IAAhBD,KAAKE,WACtCjC,EAAQ6B,EAAS7B,MACjBC,EAAS4B,EAAS5B,OACtBsB,EAAKW,SAAS,CACVlC,MAAOA,EACPC,OAAQA,uCAKX,IAAAkC,EAAAjB,KACL,OACAf,EAAAC,EAAAC,cAAA,OAAKO,UAAWC,IAAOf,WACnBK,EAAAC,EAAAC,cAAC+B,EAAD,CAAOpC,MAAOkB,KAAKI,MAAMtB,QACzBG,EAAAC,EAAAC,cAACgC,EAAD,CAAQpC,OAAQiB,KAAKI,MAAMrB,SAC3BE,EAAAC,EAAAC,cAAA,UAAQO,UAAWC,IAAOd,IAAKO,GAAG,YAAYgC,QAAS,kBAAMH,EAAKI,sBAAlE,aACApC,EAAAC,EAAAC,cAACmC,EAAD,cA9BWC,aCMRC,MARf,WACE,OACEvC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,MAAMN,GAAG,aACtBH,EAAAC,EAAAC,cAACsC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.69967a1b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"QuoteBox_container__3v0zL\",\"btn\":\"QuoteBox_btn__1FR7d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"TweetButton_btn__32JCI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"Quote_quote__1T-WP\"};","import React from 'react';\r\n\r\nconst author = props => {\r\n    return (\r\n        <h3 id=\"author\">{props.author}</h3> \r\n    )\r\n}\r\n\r\nexport default author;","import React from 'react';\r\nimport styles from './TweetButton.module.css';\r\n\r\nconst tweetButton = props => {\r\n    return (\r\n    <React.Fragment>\r\n        <a href=\"https://twitter.com/intent/tweet\" rel=\"noopener noreferrer\" target=\"_blank\" id=\"tweet-quote\"><button className={styles.btn}>Tweet Quote!</button></a>\r\n    </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default tweetButton;\r\n","import React from 'react';\r\nimport styles from './Quote.module.css';\r\n\r\nconst quote = props => {\r\n    return (\r\n        <h2 className={styles.quote} id=\"text\">{props.quote}</h2>\r\n    )\r\n}\r\n\r\nexport default quote;","import React, {Component} from 'react';\r\nimport Author from '../Author/Author';\r\nimport TweetButton from '../TweetButton/TweetButton';\r\nimport Quote from '../Quote/Quote';\r\nimport styles from './QuoteBox.module.css';\r\n\r\nclass QuoteBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            quote: '',\r\n            author: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\")\r\n        .then(results => {\r\n            return results.json();\r\n        }).then(data => {\r\n            let quoteObj = data.quotes[Math.ceil(Math.random() * 102)];\r\n            let quote = quoteObj.quote;\r\n            let author = quoteObj.author;\r\n            this.setState({\r\n                quote: quote,\r\n                author: author\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className={styles.container}>\r\n            <Quote quote={this.state.quote}/>\r\n            <Author author={this.state.author}/>\r\n            <button className={styles.btn} id=\"new-quote\" onClick={() => this.componentDidMount()}>New Quote</button>\r\n            <TweetButton />\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuoteBox;","import React from 'react';\nimport './App.css';\nimport QuoteBox from './components/QuoteBox/QuoteBox';\n\nfunction App() {\n  return (\n    <div className=\"App\" id=\"quote-box\">\n      <QuoteBox />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}